{"version":3,"file":"functions.js","mappings":";4oBAOO,IAAKA,EAAQ,SAARA,GAAQ,OAARA,EAAQ,cAARA,EAAQ,YAARA,EAAQ,YAARA,EAAQ,cAARA,CAAQ,MAQhBC,EACsCD,EAASE,MAG7CC,EAA0CC,EAAAA,EAAAA,EAAAA,EAAA,GAC7CJ,EAASK,MAAQ,GACjBL,EAASM,KAAO,GAChBN,EAASO,KAAO,GAChBP,EAASE,MAAQ,GAMb,SAASM,EAAIC,EAAiBC,EAAiBC,GAEpD,GAAIR,EAAiBM,IAAUN,EAAiBF,GAAkB,CAChE,IAAMW,GAAY,IAAIC,MAAOC,cACvBC,EAAmB,IAAHC,OAAOJ,EAAS,OAAAI,OAAMP,EAAK,MAAAO,OAAKN,GAEtD,OAAQD,GACN,KAAKT,EAASK,MACZY,QAAQC,MAAMH,EAAkBJ,GAAQ,IACxC,MACF,KAAKX,EAASM,KACZW,QAAQE,KAAKJ,EAAkBJ,GAAQ,IACvC,MACF,KAAKX,EAASO,KACZU,QAAQG,KAAKL,EAAkBJ,GAAQ,IACvC,MACF,KAAKX,EAASE,MACZe,QAAQI,MAAMN,EAAkBJ,GAAQ,IAG9C,CACF,CAmCO,IAMP,EANqB,SAACD,EAAiBC,GAAU,OAAKH,EAAIR,EAASK,MAAOK,EAASC,EAAK,EAMxF,EALoB,SAACD,EAAiBC,GAAU,OAAKH,EAAIR,EAASM,KAAMI,EAASC,EAAK,EAKtF,EAJoB,SAACD,EAAiBC,GAAU,OAAKH,EAAIR,EAASO,KAAMG,EAASC,EAAK,EAItF,EAHqB,SAACD,EAAiBC,GAAU,OAAKH,EAAIR,EAASE,MAAOQ,EAASC,EAAK,E,wuCCvFxF,IAAAW,EAAAC,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAN,EAAAE,EAAAE,EAAAE,GAAA,IAAAC,EAAAL,GAAAA,EAAAM,qBAAAC,EAAAP,EAAAO,EAAAC,EAAAC,OAAAC,OAAAL,EAAAC,WAAA,OAAAK,EAAAH,EAAA,mBAAAV,EAAAE,EAAAE,GAAA,IAAAE,EAAAC,EAAAG,EAAAI,EAAA,EAAAC,EAAAX,GAAA,GAAAY,GAAA,EAAAC,EAAA,CAAAF,EAAA,EAAAb,EAAA,EAAAgB,EAAApB,EAAAqB,EAAAC,EAAAN,EAAAM,EAAAC,KAAAvB,EAAA,GAAAsB,EAAA,SAAArB,EAAAC,GAAA,OAAAM,EAAAP,EAAAQ,EAAA,EAAAG,EAAAZ,EAAAmB,EAAAf,EAAAF,EAAAmB,CAAA,YAAAC,EAAApB,EAAAE,GAAA,IAAAK,EAAAP,EAAAU,EAAAR,EAAAH,EAAA,GAAAiB,GAAAF,IAAAV,GAAAL,EAAAgB,EAAAO,OAAAvB,IAAA,KAAAK,EAAAE,EAAAS,EAAAhB,GAAAqB,EAAAH,EAAAF,EAAAQ,EAAAjB,EAAA,GAAAN,EAAA,GAAAI,EAAAmB,IAAArB,KAAAQ,EAAAJ,GAAAC,EAAAD,EAAA,OAAAC,EAAA,MAAAD,EAAA,GAAAA,EAAA,GAAAR,GAAAQ,EAAA,IAAAc,KAAAhB,EAAAJ,EAAA,GAAAoB,EAAAd,EAAA,KAAAC,EAAA,EAAAU,EAAAC,EAAAhB,EAAAe,EAAAf,EAAAI,EAAA,IAAAc,EAAAG,IAAAnB,EAAAJ,EAAA,GAAAM,EAAA,GAAAJ,GAAAA,EAAAqB,KAAAjB,EAAA,GAAAN,EAAAM,EAAA,GAAAJ,EAAAe,EAAAf,EAAAqB,EAAAhB,EAAA,OAAAH,GAAAJ,EAAA,SAAAmB,EAAA,MAAAH,GAAA,EAAAd,CAAA,iBAAAE,EAAAW,EAAAQ,GAAA,GAAAT,EAAA,QAAAU,UAAA,oCAAAR,GAAA,IAAAD,GAAAK,EAAAL,EAAAQ,GAAAhB,EAAAQ,EAAAL,EAAAa,GAAAxB,EAAAQ,EAAA,EAAAT,EAAAY,KAAAM,GAAA,CAAAV,IAAAC,EAAAA,EAAA,GAAAA,EAAA,IAAAU,EAAAf,GAAA,GAAAkB,EAAAb,EAAAG,IAAAO,EAAAf,EAAAQ,EAAAO,EAAAC,EAAAR,GAAA,OAAAI,EAAA,EAAAR,EAAA,IAAAC,IAAAH,EAAA,QAAAL,EAAAO,EAAAF,GAAA,MAAAL,EAAAA,EAAA0B,KAAAnB,EAAAI,IAAA,MAAAc,UAAA,wCAAAzB,EAAA2B,KAAA,OAAA3B,EAAAW,EAAAX,EAAA4B,MAAApB,EAAA,IAAAA,EAAA,YAAAA,IAAAR,EAAAO,EAAAsB,SAAA7B,EAAA0B,KAAAnB,GAAAC,EAAA,IAAAG,EAAAc,UAAA,oCAAApB,EAAA,YAAAG,EAAA,GAAAD,EAAAR,CAAA,UAAAC,GAAAiB,EAAAC,EAAAf,EAAA,GAAAQ,EAAAV,EAAAyB,KAAAvB,EAAAe,MAAAE,EAAA,YAAApB,GAAAO,EAAAR,EAAAS,EAAA,EAAAG,EAAAX,CAAA,SAAAe,EAAA,UAAAa,MAAA5B,EAAA2B,KAAAV,EAAA,GAAAhB,EAAAI,EAAAE,IAAA,GAAAI,CAAA,KAAAS,EAAA,YAAAV,IAAA,UAAAoB,IAAA,UAAAC,IAAA,CAAA/B,EAAAY,OAAAoB,eAAA,IAAAxB,EAAA,GAAAL,GAAAH,EAAAA,EAAA,GAAAG,QAAAW,EAAAd,EAAA,GAAAG,EAAA,yBAAAH,GAAAW,EAAAoB,EAAAtB,UAAAC,EAAAD,UAAAG,OAAAC,OAAAL,GAAA,SAAAO,EAAAhB,GAAA,OAAAa,OAAAqB,eAAArB,OAAAqB,eAAAlC,EAAAgC,IAAAhC,EAAAmC,UAAAH,EAAAjB,EAAAf,EAAAM,EAAA,sBAAAN,EAAAU,UAAAG,OAAAC,OAAAF,GAAAZ,CAAA,QAAA+B,EAAArB,UAAAsB,EAAAjB,EAAAH,EAAA,cAAAoB,GAAAjB,EAAAiB,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAArB,EAAAiB,EAAA1B,EAAA,qBAAAS,EAAAH,GAAAG,EAAAH,EAAAN,EAAA,aAAAS,EAAAH,EAAAR,EAAA,yBAAAW,EAAAH,EAAA,oDAAAyB,EAAA,kBAAAC,EAAA9B,EAAA+B,EAAAvB,EAAA,cAAAD,EAAAf,EAAAE,EAAAE,EAAAH,GAAA,IAAAO,EAAAK,OAAA2B,eAAA,IAAAhC,EAAA,gBAAAR,GAAAQ,EAAA,EAAAO,EAAA,SAAAf,EAAAE,EAAAE,EAAAH,GAAA,SAAAK,EAAAJ,EAAAE,GAAAW,EAAAf,EAAAE,EAAA,SAAAF,GAAA,YAAAyC,QAAAvC,EAAAE,EAAAJ,EAAA,GAAAE,EAAAM,EAAAA,EAAAR,EAAAE,EAAA,CAAA2B,MAAAzB,EAAAsC,YAAAzC,EAAA0C,cAAA1C,EAAA2C,UAAA3C,IAAAD,EAAAE,GAAAE,GAAAE,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAS,EAAAf,EAAAE,EAAAE,EAAAH,EAAA,UAAA4C,EAAAzC,EAAAH,EAAAD,EAAAE,EAAAI,EAAAe,EAAAZ,GAAA,QAAAD,EAAAJ,EAAAiB,GAAAZ,GAAAG,EAAAJ,EAAAqB,KAAA,OAAAzB,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAAoB,KAAA3B,EAAAW,GAAAkC,QAAAC,QAAAnC,GAAAoC,KAAA9C,EAAAI,EAAA,UAAA2C,EAAA7C,GAAA,sBAAAH,EAAA,KAAAD,EAAAkD,UAAA,WAAAJ,QAAA,SAAA5C,EAAAI,GAAA,IAAAe,EAAAjB,EAAA+C,MAAAlD,EAAAD,GAAA,SAAAoD,EAAAhD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,OAAAjD,EAAA,UAAAiD,EAAAjD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,QAAAjD,EAAA,CAAAgD,OAAA,eAAAE,EAAAtD,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAAsB,OAAAvB,IAAA,KAAAK,EAAAJ,EAAAD,GAAAK,EAAAoC,WAAApC,EAAAoC,aAAA,EAAApC,EAAAqC,cAAA,YAAArC,IAAAA,EAAAsC,UAAA,GAAA/B,OAAA2B,eAAAxC,EAAAuD,EAAAjD,EAAAkD,KAAAlD,EAAA,WAAAxB,EAAAkB,EAAAE,EAAAD,GAAA,OAAAC,EAAAqD,EAAArD,MAAAF,EAAAa,OAAA2B,eAAAxC,EAAAE,EAAA,CAAA2B,MAAA5B,EAAAyC,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAA5C,EAAAE,GAAAD,EAAAD,CAAA,UAAAuD,EAAAtD,GAAA,IAAAO,EAAA,SAAAP,GAAA,aAAAwD,EAAAxD,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAE,OAAAuD,aAAA,YAAA1D,EAAA,KAAAQ,EAAAR,EAAA2B,KAAA1B,EAAAC,UAAA,aAAAuD,EAAAjD,GAAA,OAAAA,EAAA,UAAAkB,UAAA,uDAAAiC,OAAA1D,EAAA,CAAA2D,CAAA3D,GAAA,gBAAAwD,EAAAjD,GAAAA,EAAAA,EAAA,GAaA,IAGMqD,EAAuB,kBACvBC,EAA8B,wBAKvBC,EAAiB,WAY5B,OAlCF/D,EA2BE,SAAA+D,IAA8C,IAAlCC,EAAcd,UAAA1B,OAAA,QAAAyC,IAAAf,UAAA,GAAAA,UAAA,GAdJ,4CAbxB,SAAA7B,EAAAjB,GAAA,KAAAiB,aAAAjB,GAAA,UAAAsB,UAAA,qCA2B8CwC,CAAA,KAAAH,GAAAjF,EAAA,cAJZ,MAAIA,EAAA,4BAEG,GAGrCqF,KAAKH,OAASA,EAGdI,EAAY,2CAAD1E,OAA4CyE,KAAKH,QAC9D,EAhCF9D,EAkCE,EAAAsD,IAAA,aAAA3B,MAIA,WACEsC,KAAKE,qBAAsB,EAC3BF,KAAKG,aACLF,EAAY,wDAAD1E,OAAyDyE,KAAKI,kBAAoB,YAAc,iBAC7G,GAEA,CAAAf,IAAA,uBAAA3B,MAIA,WACE,IAEE,IAAM2C,EAAoBC,eAAeC,QAAQZ,GACjD,GAAIU,EAAmB,CACrB,IAAMG,EAAcC,KAAKC,MAAML,GAC/B,GAAIG,GAAeA,EAAYG,gBAE7B,OADAV,EAAY,2CACL,CAEX,CAIA,GADqBK,eAAeC,QAAQb,GAG1C,OADAO,EAAY,2CACL,CAEX,CAAE,MAAOrE,GACPqE,EAAa,oCAAqCrE,EACpD,CAEA,OAAO,CACT,GAEA,CAAAyD,IAAA,YAAA3B,MAGA,SAAiBkD,GACfZ,KAAKY,OAASA,EACdZ,KAAKa,WAAWD,EAClB,GAEA,CAAAvB,IAAA,aAAA3B,MAGA,SAAmBkD,GACjB,IAEEN,eAAeQ,QAAQpB,EAAsBkB,GAG7C,IACE,IAAMP,EAAoBC,eAAeC,QAAQZ,GACjD,GAAIU,EAAmB,CACrB,IAAMG,EAAcC,KAAKC,MAAML,GAC/BG,EAAYG,gBAAkBC,EAC9BN,eAAeQ,QAAQnB,EAA6Bc,KAAKM,UAAUP,GACrE,KAAO,CAEL,IAAMQ,EAAiB,CAAEL,gBAAiBC,GAC1CN,eAAeQ,QAAQnB,EAA6Bc,KAAKM,UAAUC,GACrE,CACF,CAAE,MAAOpF,GACPqE,EAAY,0CAA2CrE,EACzD,CAEAqE,EAAY,kCACd,CAAE,MAAOrE,GACPqE,EAAa,2CAA4CrE,EAC3D,CACF,GAEA,CAAAyD,IAAA,YAAA3B,OAAAuD,EAAAnC,EAAAZ,IAAAE,EAOA,SAAA8C,EAAuBC,EAAiBC,GAAc,IAAAC,EAAAC,EAAA,OAAApD,IAAAC,EAAA,SAAAoD,GAAA,cAAAA,EAAAtF,GAAA,OAOC,OANrDgE,EAAY,iCAAD1E,OAAkC4F,EAAO,cAAA5F,OAAa6F,EAAOI,UAAU,EAAG,IAAG,QAMxFvB,EAAa,0BALPoB,EAAc,CAClBI,MAAON,EACPO,MAAON,EACPO,QAAQ,IAE2CJ,EAAAtF,EAAA,EAC9B+D,KAAK4B,WAAU,aAAoB,OAAQP,GAAa,GAAK,OAAtE,IAARC,EAAQC,EAAAtE,GACA4E,QAAS,CAAFN,EAAAtF,EAAA,eAAAsF,EAAArE,EAAA,EACZoE,GAAQ,cAAAC,EAAArE,EAAA,EAEVoE,GAAQ,EAAAJ,EAAA,SAChB,SAbqBY,EAAAC,GAAA,OAAAd,EAAAjC,MAAC,KAADD,UAAA,IAetB,CAAAM,IAAA,aAAA3B,MAGA,WACEuC,EAAY,kDAEZ,IAEE,IAAMI,EAAoBC,eAAeC,QAAQZ,GACjD,GAAIU,EACF,IACE,IAAMG,EAAcC,KAAKC,MAAML,GAC/B,GAAIG,GAAeA,EAAYG,gBAG7B,OAFAX,KAAKY,OAASJ,EAAYG,qBAC1BV,EAAY,4CAGhB,CAAE,MAAO+B,GACP/B,EAAY,wCAAyC+B,EACvD,CAIF,IAAMC,EAAe3B,eAAeC,QAAQb,GAC5C,GAAIuC,EAGF,OAFAjC,KAAKY,OAASqB,OACdhC,EAAY,4CAGhB,CAAE,MAAOrE,GACPqE,EAAa,6CAA8CrE,EAC7D,CAGAqE,EAAY,qCACd,GAEA,CAAAZ,IAAA,kBAAA3B,MAGA,WAME,OAJKsC,KAAKY,QACRZ,KAAKG,eAEaH,KAAKY,QAAiC,KAAvBZ,KAAKY,OAAOsB,MAEjD,GAEA,CAAA7C,IAAA,cAAA3B,MAGA,WACEsC,KAAKY,OAAS,KAEd,IAEEN,eAAe6B,WAAWzC,GAG1B,IAAMW,EAAoBC,eAAeC,QAAQZ,GACjD,GAAIU,EACF,IACE,IAAMG,EAAcC,KAAKC,MAAML,GAC3BG,WACKA,EAAYG,gBACnBL,eAAeQ,QAAQnB,EAA6Bc,KAAKM,UAAUP,IAEvE,CAAE,MAAOwB,GACP/B,EAAY,qDAAsD+B,EACpE,CAGF/B,EAAY,oDACd,CAAE,MAAOrE,GACPqE,EAAa,8CAA+CrE,EAC9D,CACF,GAEA,CAAAyD,IAAA,aAAA3B,OAAA0E,EAAAtD,EAAAZ,IAAAE,EAIA,SAAAiE,EACEC,GAAgB,IAAAC,EAAArH,EAAAsH,EAAAC,EAAAC,EAAApB,EAAAqB,EAAAC,EAAAC,EAAAC,EAAA/D,UAAA,OAAAb,IAAAC,EAAA,SAAA4E,GAAA,cAAAA,EAAAjG,EAAAiG,EAAA9G,GAAA,OAGM,GAFtBsG,EAAcO,EAAAzF,OAAA,QAAAyC,IAAAgD,EAAA,GAAAA,EAAA,GAAG,OACjB5H,EAAU4H,EAAAzF,OAAA,EAAAyF,EAAA,QAAAhD,EAILE,KAAKI,kBAAmB,CAAF2C,EAAA9G,EAAA,QAC6B,OAAtDgE,EAAa,yCAAyC8C,EAAA7F,EAAA,EAC/C,CACL2E,SAAS,EACTjG,MAAO,sDACR,OAmB0C,OAhBvC4G,EAAM,GAAHjH,OAAMyE,KAAKH,QAAMtE,OAAG+G,GAAQS,EAAAjG,EAAA,EAGnCmD,EAAY,UAAD1E,OAAWgH,EAAM,gBAAAhH,OAAeiH,GAAOtH,GAE5CuH,EAAU,IAAIO,QAAQ,CAC1B,eAAgB,mBAChB,cAAiB,UAAFzH,OAAYyE,KAAKY,UAGlCX,EAAa,mBAAoB,CAC/BgD,YAAaR,EAAQS,IAAI,gBACzBC,cAAenD,KAAKY,OAAS,UAAHrF,OAAayE,KAAKY,OAAOY,UAAU,EAAG,GAAE,OAAQ,SAGtEkB,EAAcxH,EAAOuF,KAAKM,UAAU7F,QAAQ4E,EAClDG,EAAa,gBAAiByC,GAAaK,EAAA9G,EAAA,EAEpBmH,MAAMZ,EAAK,CAChCD,OAAAA,EACAE,QAAAA,EACAY,KAAMX,IACN,OAEwE,GANpEpB,EAAQyB,EAAA9F,EAMdgD,EAAY,oBAAD1E,OAAqB+F,EAASgC,OAAM,KAAA/H,OAAI+F,EAASiC,aAEvDjC,EAASkC,GAAI,CAAFT,EAAA9G,EAAA,eAAA8G,EAAA9G,EAAA,EACUqF,EAASmC,OAAM,OACkD,OADnFd,EAASI,EAAA9F,EACfgD,EAAa,uBAAD1E,OAAwB+F,EAASgC,OAAM,KAAA/H,OAAI+F,EAASiC,YAAcZ,GAAWI,EAAA7F,EAAA,EAElF,CACL2E,SAAS,EACTjG,MAAO,mBAAFL,OAAqB+F,EAASgC,OAAM,OAAA/H,OAAMoH,GAAarB,EAASiC,cACtE,cAAAR,EAAA9G,EAAA,EAG4B+D,KAAK0D,uBAAuBpC,GAAS,OAA9C,OAAhBsB,EAAgBG,EAAA9F,EAAA8F,EAAA7F,EAAA,EACf0F,GAAgB,OAGkC,OAHlCG,EAAAjG,EAAA,EAAA+F,EAAAE,EAAA9F,EAGvBgD,EAAa,oCAAmC4C,GAASE,EAAA7F,EAAA,EAClD,CACL2E,SAAS,EACTjG,MAAOiH,aAAiBc,MAAQd,EAAM5H,QAAU,2BACjD,EAAAoH,EAAA,iBAEJ,SA7DuBuB,GAAA,OAAAxB,EAAApD,MAAA,KAAAD,UAAA,IA+DxB,CAAAM,IAAA,yBAAA3B,OAAAmG,EAAA/E,EAAAZ,IAAAE,EAKA,SAAA0F,EAAqCxC,GAAkB,IAAAyC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/G,EAAAC,EAAA+G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7J,EAAA8J,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlH,IAAAC,EAAA,SAAAkH,GAAA,cAAAA,EAAAvI,EAAAuI,EAAApJ,GAAA,OAGV,GAHUoJ,EAAAvI,EAAA,EAG7CsH,EAAsB,QAAhBL,EAAGzC,EAAS+B,YAAI,IAAAU,OAAA,EAAbA,EAAeuB,YACjB,CAAFD,EAAApJ,EAAA,QACyC,OAAlDgE,EAAa,qCAAqCoF,EAAAnI,EAAA,EAC3C,CACL2E,SAAS,EACTjG,MAAO,sCACR,OAGHqE,EAAY,gCAGRoE,EAAW,GACXC,EAAgB,KAChBC,EAAkB,EAEtB,OACW,OAAAc,EAAAvI,EAAA,EAAAuI,EAAApJ,EAAA,EAEuBmI,EAAOmB,OAAM,OAAxB,GAAwBf,EAAAa,EAAApI,EAAnCQ,EAAI+G,EAAJ/G,KAAMC,EAAK8G,EAAL9G,OACVD,EAAM,CAAF4H,EAAApJ,EAAA,eAAAoJ,EAAAnI,EAAA,aAGFuH,GAAQ,IAAIe,aAAcC,OAAO/H,GACvCuC,EAAa,yBAA0BwE,EAAMjD,UAAU,EAAG,MAAQiD,EAAMpH,OAAS,IAAM,MAAQ,KAGzFqH,EAAQD,EAAMiB,MAAM,MAAKf,EAAAgB,EACZjB,GAAKW,EAAAvI,EAAA,EAAA6H,EAAAiB,IAAA,WAAAhB,EAAAD,EAAA1I,KAAAwB,KAAE,CAAF4H,EAAApJ,EAAA,SAAT,KAAJ4I,EAAID,EAAAlH,OACJmI,WAAW,UAAW,CAAFR,EAAApJ,EAAA,SAG3B,GACuB,YAHjB6I,EAAUD,EAAKrD,UAAU,IAGnBU,OAAmB,CAAAmD,EAAApJ,EAAA,QAC0B,OAAvDgE,EAAY,2CAA2CoF,EAAAnI,EAAA,aAAAmI,EAAAvI,EAAA,EAKjD5B,EAAOuF,KAAKC,MAAMoE,GACxB7E,EAAa,2BAA4B/E,EAAK4K,MAG5B,uBAAd5K,EAAK4K,MAEPxB,EAAgBpJ,EAAKoG,SACrBrB,EAAY,4BACW,+BAAd/E,EAAK4K,MAAuD,8BAAd5K,EAAK4K,KAExD5K,EAAK6K,MACP1B,GAAYnJ,EAAK6K,MACR7K,EAAKuI,OACdY,EAAWnJ,EAAKuI,MAEK,+BAAdvI,EAAK4K,MAAkD,QAAbf,EAAI7J,EAAK8K,YAAI,IAAAjB,GAATA,EAAWtB,KAElEY,EAAWnJ,EAAK8K,KAAKvC,KACZvI,EAAKoG,UAAYpG,EAAKoG,SAAS2E,SAExC3B,EAAgBpJ,EAAKoG,UACtB+D,EAAApJ,EAAA,gBAKD,GALCoJ,EAAAvI,EAAA,EAAAmI,EAAAI,EAAApI,EAEDsH,IACAtE,EAAY,8BAAD1E,OAA+BgJ,EAAe,OAAAhJ,OAAA0J,EAAA,OAAA1J,OAAsBuJ,EAAQtD,UAAU,EAAG,SAGhG+C,EAAkB,GAAC,CAAAc,EAAApJ,EAAA,SAC0C,MAA/DgE,EAAa,kDACP,IAAI0D,MAAM,qDAAoD,QAAA0B,EAAApJ,EAAA,gBAAAoJ,EAAApJ,EAAA,iBAAAoJ,EAAAvI,EAAA,GAAAoI,EAAAG,EAAApI,EAAA0H,EAAA9I,EAAAqJ,GAAA,eAAAG,EAAAvI,EAAA,GAAA6H,EAAA9H,IAAAwI,EAAAxI,EAAA,YAAAwI,EAAApJ,EAAA,iBAMhB,MANgBoJ,EAAAvI,EAAA,GAAAqI,EAAAE,EAAApI,EAM5EgD,EAAa,iCAAgCkF,GAAeA,EAAA,QAAAE,EAAApJ,EAAA,gBAuB7D,OAjBG+I,EAAsB,CAC1BkB,QAAS7B,GAAY,GACrB8B,IAAiB,QAAbnC,EAAAM,SAAa,IAAAN,OAAA,EAAbA,EAAemC,KAAM,GACzB1E,OAAoB,QAAbwC,EAAAK,SAAa,IAAAL,OAAA,EAAbA,EAAexC,QAAS,GAC/B2E,SAAsB,QAAblC,EAAAI,SAAa,IAAAJ,OAAA,EAAbA,EAAemC,aAAcjL,KAAKkL,MAE3CL,QAAqB,QAAb9B,EAAAG,SAAa,IAAAH,OAAA,EAAbA,EAAe8B,SAAU,GAEjCM,YAAajC,GAGfrE,EAAY,4CACZA,EAAa,wBAAyB,CACpCuG,cAAexB,EAAoBkB,QAAQ7I,OAC3CoJ,QAASzB,EAAoBmB,GAC7BO,WAAY1B,EAAoBvD,MAChCkF,YAAa3B,EAAoBiB,OAAO5I,SACvCgI,EAAAnI,EAAA,EAEI,CACL2E,SAAS,EACT3G,KAAM8J,IACP,QAE0D,OAF1DK,EAAAvI,EAAA,GAAAsI,EAAAC,EAAApI,EAEDgD,EAAa,sCAAqCmF,GAASC,EAAAnI,EAAA,EACpD,CACL2E,SAAS,EACTjG,MAAOwJ,aAAiBzB,MAAQyB,EAAMnK,QAAU,wCACjD,EAAA6I,EAAA,4CAEJ,SAjHmC8C,GAAA,OAAA/C,EAAA7E,MAAC,KAADD,UAAA,IAmHpC,CAAAM,IAAA,iBAAA3B,OAAAmJ,EAAA/H,EAAAZ,IAAAE,EAGA,SAAA0I,IAAA,IAAAC,EAAAC,EAAA,OAAA9I,IAAAC,EAAA,SAAA8I,GAAA,cAAAA,EAAAnK,EAAAmK,EAAAhL,GAAA,OAGE,GAFAgE,EAAY,0CAGPD,KAAKI,kBAAmB,CAAF6G,EAAAhL,EAAA,QACoC,OAA7DgE,EAAa,gDAAgDgH,EAAA/J,EAAA,EACtD,CACL2E,SAAS,EACTjG,MAAO,qCACR,OAK8B,OAL9BqL,EAAAnK,EAAA,EAK8BmK,EAAAhL,EAAA,EACV+D,KAAK4B,WAAgB,aAAc,OAAQ,CAC9DH,MAFY,gBAGZC,MAAO,kBACPwF,WAAY,KACX,GAAK,OAWP,OAfKH,EAAME,EAAAhK,EAMZgD,EAAY,2BAAD1E,OAA4BwL,EAAOlF,QAAU,UAAY,WAEhEkF,EAAOlF,SAET5B,EAAa,mCAAoC,CAC/CkH,WAAYJ,EAAO7L,WAAuC,IAAxB6L,EAAO7L,KAAKgL,QAC9CkB,WAAYL,EAAO7L,MAAQmM,MAAMC,QAAQP,EAAO7L,KAAKqM,SACrDC,aAAcT,EAAO7L,KAAOwB,OAAO+K,KAAKV,EAAO7L,MAAQ,KAE1D+L,EAAA/J,EAAA,EAEM6J,GAAM,OAE6C,OAF7CE,EAAAnK,EAAA,EAAAkK,EAAAC,EAAAhK,EAEbgD,EAAa,qCAAoC+G,GAASC,EAAA/J,EAAA,EACnD,CACL2E,SAAS,EACTjG,MAAOoL,aAAiBrD,MAAQqD,EAAM/L,QAAU,yCACjD,EAAA6L,EAAA,iBAEJ,WAxC0B,OAAAD,EAAA7H,MAAC,KAADD,UAAA,IA0C3B,CAAAM,IAAA,mBAAA3B,OAAAgK,EAAA5I,EAAAZ,IAAAE,EAIA,SAAAuJ,EACEC,EACAnG,GAAa,IAAAE,EAAAkG,EAAA9I,UAAA,OAAAb,IAAAC,EAAA,SAAA2J,GAAA,cAAAA,EAAA7L,EAKb,OAJA0F,IAAekG,EAAAxK,OAAA,QAAAyC,IAAA+H,EAAA,KAAAA,EAAA,GAEf5H,EAAY,2CAA4C,CAAE2H,MAAOA,EAAMpG,UAAU,EAAG,KAAO,MAAOC,MAAAA,EAAOE,OAAAA,IAEzGmG,EAAA5K,EAAA,EACO8C,KAAK4B,WAA2B,aAAc,OAAQ,CAC3DH,MAAOA,EACPC,MAAOkG,EACPjG,OAAQA,GACPA,GAAO,EAAAgG,EAAA,SACX,SAb4BI,EAAAC,GAAA,OAAAN,EAAA1I,MAAC,KAADD,UAAA,KAhc/BhD,GAAAoD,EAAAtD,EAAAU,UAAAR,GAAAW,OAAA2B,eAAAxC,EAAA,aAAA4C,UAAA,IAAA5C,EAAA,IAAAA,EAAAE,EA4bE2L,EA7CAb,EAxHAhD,EAnEAzB,EArGAnB,CAiV6B,CA1aD,G,aCtB9B,IAAApF,EAAAC,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAN,EAAAE,EAAAE,EAAAE,GAAA,IAAAC,EAAAL,GAAAA,EAAAM,qBAAAC,EAAAP,EAAAO,EAAAC,EAAAC,OAAAC,OAAAL,EAAAC,WAAA,OAAAK,EAAAH,EAAA,mBAAAV,EAAAE,EAAAE,GAAA,IAAAE,EAAAC,EAAAG,EAAAI,EAAA,EAAAC,EAAAX,GAAA,GAAAY,GAAA,EAAAC,EAAA,CAAAF,EAAA,EAAAb,EAAA,EAAAgB,EAAApB,EAAAqB,EAAAC,EAAAN,EAAAM,EAAAC,KAAAvB,EAAA,GAAAsB,EAAA,SAAArB,EAAAC,GAAA,OAAAM,EAAAP,EAAAQ,EAAA,EAAAG,EAAAZ,EAAAmB,EAAAf,EAAAF,EAAAmB,CAAA,YAAAC,EAAApB,EAAAE,GAAA,IAAAK,EAAAP,EAAAU,EAAAR,EAAAH,EAAA,GAAAiB,GAAAF,IAAAV,GAAAL,EAAAgB,EAAAO,OAAAvB,IAAA,KAAAK,EAAAE,EAAAS,EAAAhB,GAAAqB,EAAAH,EAAAF,EAAAQ,EAAAjB,EAAA,GAAAN,EAAA,GAAAI,EAAAmB,IAAArB,KAAAQ,EAAAJ,GAAAC,EAAAD,EAAA,OAAAC,EAAA,MAAAD,EAAA,GAAAA,EAAA,GAAAR,GAAAQ,EAAA,IAAAc,KAAAhB,EAAAJ,EAAA,GAAAoB,EAAAd,EAAA,KAAAC,EAAA,EAAAU,EAAAC,EAAAhB,EAAAe,EAAAf,EAAAI,EAAA,IAAAc,EAAAG,IAAAnB,EAAAJ,EAAA,GAAAM,EAAA,GAAAJ,GAAAA,EAAAqB,KAAAjB,EAAA,GAAAN,EAAAM,EAAA,GAAAJ,EAAAe,EAAAf,EAAAqB,EAAAhB,EAAA,OAAAH,GAAAJ,EAAA,SAAAmB,EAAA,MAAAH,GAAA,EAAAd,CAAA,iBAAAE,EAAAW,EAAAQ,GAAA,GAAAT,EAAA,QAAAU,UAAA,oCAAAR,GAAA,IAAAD,GAAAK,EAAAL,EAAAQ,GAAAhB,EAAAQ,EAAAL,EAAAa,GAAAxB,EAAAQ,EAAA,EAAAT,EAAAY,KAAAM,GAAA,CAAAV,IAAAC,EAAAA,EAAA,GAAAA,EAAA,IAAAU,EAAAf,GAAA,GAAAkB,EAAAb,EAAAG,IAAAO,EAAAf,EAAAQ,EAAAO,EAAAC,EAAAR,GAAA,OAAAI,EAAA,EAAAR,EAAA,IAAAC,IAAAH,EAAA,QAAAL,EAAAO,EAAAF,GAAA,MAAAL,EAAAA,EAAA0B,KAAAnB,EAAAI,IAAA,MAAAc,UAAA,wCAAAzB,EAAA2B,KAAA,OAAA3B,EAAAW,EAAAX,EAAA4B,MAAApB,EAAA,IAAAA,EAAA,YAAAA,IAAAR,EAAAO,EAAAsB,SAAA7B,EAAA0B,KAAAnB,GAAAC,EAAA,IAAAG,EAAAc,UAAA,oCAAApB,EAAA,YAAAG,EAAA,GAAAD,EAAAR,CAAA,UAAAC,GAAAiB,EAAAC,EAAAf,EAAA,GAAAQ,EAAAV,EAAAyB,KAAAvB,EAAAe,MAAAE,EAAA,YAAApB,GAAAO,EAAAR,EAAAS,EAAA,EAAAG,EAAAX,CAAA,SAAAe,EAAA,UAAAa,MAAA5B,EAAA2B,KAAAV,EAAA,GAAAhB,EAAAI,EAAAE,IAAA,GAAAI,CAAA,KAAAS,EAAA,YAAAV,IAAA,UAAAoB,IAAA,UAAAC,IAAA,CAAA/B,EAAAY,OAAAoB,eAAA,IAAAxB,EAAA,GAAAL,GAAAH,EAAAA,EAAA,GAAAG,QAAAW,EAAAd,EAAA,GAAAG,EAAA,yBAAAH,GAAAW,EAAAoB,EAAAtB,UAAAC,EAAAD,UAAAG,OAAAC,OAAAL,GAAA,SAAAO,EAAAhB,GAAA,OAAAa,OAAAqB,eAAArB,OAAAqB,eAAAlC,EAAAgC,IAAAhC,EAAAmC,UAAAH,EAAAjB,EAAAf,EAAAM,EAAA,sBAAAN,EAAAU,UAAAG,OAAAC,OAAAF,GAAAZ,CAAA,QAAA+B,EAAArB,UAAAsB,EAAAjB,EAAAH,EAAA,cAAAoB,GAAAjB,EAAAiB,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAArB,EAAAiB,EAAA1B,EAAA,qBAAAS,EAAAH,GAAAG,EAAAH,EAAAN,EAAA,aAAAS,EAAAH,EAAAR,EAAA,yBAAAW,EAAAH,EAAA,oDAAAyB,EAAA,kBAAAC,EAAA9B,EAAA+B,EAAAvB,EAAA,cAAAD,EAAAf,EAAAE,EAAAE,EAAAH,GAAA,IAAAO,EAAAK,OAAA2B,eAAA,IAAAhC,EAAA,gBAAAR,GAAAQ,EAAA,EAAAO,EAAA,SAAAf,EAAAE,EAAAE,EAAAH,GAAA,SAAAK,EAAAJ,EAAAE,GAAAW,EAAAf,EAAAE,EAAA,SAAAF,GAAA,YAAAyC,QAAAvC,EAAAE,EAAAJ,EAAA,GAAAE,EAAAM,EAAAA,EAAAR,EAAAE,EAAA,CAAA2B,MAAAzB,EAAAsC,YAAAzC,EAAA0C,cAAA1C,EAAA2C,UAAA3C,IAAAD,EAAAE,GAAAE,GAAAE,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAS,EAAAf,EAAAE,EAAAE,EAAAH,EAAA,UAAA4C,EAAAzC,EAAAH,EAAAD,EAAAE,EAAAI,EAAAe,EAAAZ,GAAA,QAAAD,EAAAJ,EAAAiB,GAAAZ,GAAAG,EAAAJ,EAAAqB,KAAA,OAAAzB,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAAoB,KAAA3B,EAAAW,GAAAkC,QAAAC,QAAAnC,GAAAoC,KAAA9C,EAAAI,EAAA,CAUA,IAAM8L,EDwc2B,IAAIrI,ECrcjCsI,GAAmB,EAMvBC,OAAOC,QAAQ,WACb,IACEnI,EAAY,oDAEZgI,EAAWI,aACXH,GAAmB,EACnBjI,EAAY,uDAAD1E,OAAwD0M,EAAW7H,kBAAoB,gBAAkB,sBAaxH,WACE,IAEEkI,gBAAgBC,UAAU,wBAAyBC,GACnDF,gBAAgBC,UAAU,8BAA+BE,GACzDH,gBAAgBC,UAAU,wBAAyBG,GAEnDzI,EAAY,2CACd,CAAE,MAAOrE,GACPqE,EAAa,sCAAuCrE,EACtD,CACF,CArBI+M,EACF,CAAE,MAAO/M,GACPqE,EAAa,+BAAgCrE,EAC/C,CACF,GAsBA,IAAMgN,EAAuC,CAC3C,SAAY,8BACZ,QAAW,wBACX,QAAW,iBAGb,SAOeC,EAAgB/G,EAAAC,EAAA6B,GAAA,OAAAkF,EAAA9J,MAAC,KAADD,UAAA,CAiD/B,SAAA+J,IApHA,IAAA7M,EA8GC,OA9GDA,EAoHAiC,IAAAE,EAjDA,SAAA8C,EACEC,EACAC,EACA2H,GAAwD,IAAAC,EAAA1H,EAAAuB,EAAA,OAAA3E,IAAAC,EAAA,SAAAoD,GAAA,cAAAA,EAAAzE,EAAAyE,EAAAtF,GAAA,UAAAsF,EAAAzE,EAAA,EAIjDsE,GAA4B,KAAlBA,EAAOc,OAAa,CAAAX,EAAAtF,EAAA,eAAAsF,EAAArE,EAAA,EAC1B,wCAAsC,UAI1CgL,EAAkB,CAAF3G,EAAAtF,EAAA,eAAAsF,EAAArE,EAAA,EACZ,kEAAgE,UAIpE+K,EAAW7H,kBAAmB,CAAFmB,EAAAtF,EAAA,eAAAsF,EAAArE,EAAA,EACxB,4EAA0E,OAMnF,OAFM8L,EAAYJ,EAAazH,EAAQ8H,gBAAkB9H,EAEzDI,EAAAtF,EAAA,EACuBgM,EAAWiB,UAAUF,EAAW5H,GAAO,OAAhD,OAARE,EAAQC,EAAAtE,EAAAsE,EAAArE,EAAA,EAGPoE,EAASpG,KAAKgL,SAAW,uBAAqB,OAGY,GAHZ3E,EAAAzE,EAAA,EAAA+F,EAAAtB,EAAAtE,EAGrDgD,EAAa,gCAAD1E,OAAiC4F,EAAO,MAAA0B,KAChDA,aAAiBc,OAAK,CAAApC,EAAAtF,EAAA,eAAAsF,EAAArE,EAAA,YAAA3B,OACPsH,EAAM5H,UAAO,OAM0B,OAF1DqN,gBAAgBC,UAAU,gBAAiBC,GAC3CF,gBAAgBC,UAAU,sBAAuBE,GACjDH,gBAAgBC,UAAU,gBAAiBG,GAAenH,EAAArE,EAAA,EAEnD,uCAAqC,EAAAgE,EAAA,gBAQhD4H,EApHA,eAAAhN,EAAA,KAAAD,EAAAkD,UAAA,WAAAJ,QAAA,SAAA5C,EAAAI,GAAA,IAAAe,EAAAjB,EAAA+C,MAAAlD,EAAAD,GAAA,SAAAoD,EAAAhD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,OAAAjD,EAAA,UAAAiD,EAAAjD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,QAAAjD,EAAA,CAAAgD,OAAA,MA8GC6J,EAAA9J,MAAA,KAAAD,UAAA,CAaM,SAASyJ,EAAcpH,GAC5B,OAAOyH,EAAiB,UAAWzH,EACrC,CAaO,SAASqH,EAAoBrH,GAClC,OAAOyH,EAAiB,WAAYzH,EACtC,CAaO,SAASsH,EAActH,GAC5B,OAAOyH,EAAiB,UAAWzH,EACrC,CACAkH,gBAAgBC,UAAU,gBAAiBC,GAC3CF,gBAAgBC,UAAU,sBAAuBE,GACjDH,gBAAgBC,UAAU,gBAAiBG,E","sources":["webpack://excel-custom-functions/./src/utils/logger.ts","webpack://excel-custom-functions/./src/api/octagonApi.ts","webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/**\n * Logging utility for Octagon Excel Add-in\n * This module provides centralized logging functionality with different log levels\n * to help debug issues during development and production.\n */\n\n// Log levels\nexport enum LogLevel {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR'\n}\n\n// Current log level - can be adjusted based on environment\nlet currentLogLevel: LogLevel = \n  process.env.NODE_ENV === 'production' ? LogLevel.ERROR : LogLevel.DEBUG;\n\n// Log level priority (used to determine if a message should be logged)\nconst logLevelPriority: Record<LogLevel, number> = {\n  [LogLevel.DEBUG]: 0,\n  [LogLevel.INFO]: 1,\n  [LogLevel.WARN]: 2,\n  [LogLevel.ERROR]: 3\n};\n\n/**\n * Main logging function that handles all log levels\n */\nexport function log(level: LogLevel, message: string, data?: any): void {\n  // Only log if the current level priority is less than or equal to the message level\n  if (logLevelPriority[level] >= logLevelPriority[currentLogLevel]) {\n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] [${level}] ${message}`;\n\n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(formattedMessage, data || '');\n        break;\n      case LogLevel.INFO:\n        console.info(formattedMessage, data || '');\n        break;\n      case LogLevel.WARN:\n        console.warn(formattedMessage, data || '');\n        break;\n      case LogLevel.ERROR:\n        console.error(formattedMessage, data || '');\n        break;\n    }\n  }\n}\n\n/**\n * Set the current log level\n */\nexport function setLogLevel(level: LogLevel): void {\n  currentLogLevel = level;\n  log(LogLevel.INFO, `Log level set to ${level}`);\n}\n\n/**\n * Get all logs stored in session storage\n */\nexport function getLogs(): any[] {\n  try {\n    return JSON.parse(sessionStorage.getItem('octagon_logs') || '[]');\n  } catch (e) {\n    console.error('[Logger] Error retrieving logs from sessionStorage:', e);\n    return [];\n  }\n}\n\n/**\n * Clear all logs in session storage\n */\nexport function clearLogs(): void {\n  try {\n    sessionStorage.removeItem('octagon_logs');\n  } catch (e) {\n    // Log the error instead of silently failing\n    console.error('[Logger] Error clearing logs from sessionStorage:', e);\n  }\n}\n\n// Convenience methods for each log level\nexport const debug = (message: string, data?: any) => log(LogLevel.DEBUG, message, data);\nexport const info = (message: string, data?: any) => log(LogLevel.INFO, message, data);\nexport const warn = (message: string, data?: any) => log(LogLevel.WARN, message, data);\nexport const error = (message: string, data?: any) => log(LogLevel.ERROR, message, data);\n\n// Export a default logger object\nexport default {\n  debug,\n  info,\n  warn,\n  error,\n  setLogLevel,\n  getLogs,\n  clearLogs\n};","/**\r\n * Octagon API Service Defintions\r\n * This service handles all communication with the Octagon API using OpenAI-compatible endpoints.\r\n * It provides methods to query agents using the chat/completions pattern.\r\n */\r\n\r\nimport {\r\n  ApiResponse,\r\n  AgentFullResponse,\r\n  StreamResponse\r\n} from './types';\r\nimport Logger from '../utils/logger';\r\n\r\n// API Configuration\r\nconst DEFAULT_API_URL = 'https://api-gateway.octagonagents.com/v1';\r\n\r\n// SessionStorage key constants\r\nconst API_KEY_STORAGE_NAME = 'octagon_api_key';\r\nconst CACHED_SESSION_SETTINGS_KEY = 'CachedSessionSettings';\r\n\r\n/**\r\n * OctagonApiService class handles all API interactions\r\n */\r\nexport class OctagonApiService {\r\n  private apiKey: string | null = null;\r\n  private apiUrl: string;\r\n  private isOfficeInitialized: boolean = false;\r\n  \r\n  constructor(apiUrl: string = DEFAULT_API_URL) {\r\n    this.apiUrl = apiUrl;\r\n    // Don't automatically initialize in constructor to avoid race conditions\r\n    // Instead, require explicit initialization after Office.onReady\r\n    Logger.info(`OctagonApiService created with API URL: ${this.apiUrl}`);\r\n  }\r\n  \r\n  /**\r\n   * Initialize the service after Office is ready\r\n   * This should be called after Office.onReady completes\r\n   */\r\n  public initialize(): void {\r\n    this.isOfficeInitialized = true;\r\n    this.loadApiKey();\r\n    Logger.info(`OctagonApiService fully initialized. API key status: ${this.isAuthenticated() ? 'Available' : 'Not available'}`);\r\n  }\r\n  \r\n  /**\r\n   * Check if API key exists in SessionStorage\r\n   * @returns boolean True if API key is found in SessionStorage\r\n   */\r\n  public checkForStoredApiKey(): boolean {\r\n    try {\r\n      // Check if we have a cached session settings with an API key\r\n      const cachedSessionData = sessionStorage.getItem(CACHED_SESSION_SETTINGS_KEY);\r\n      if (cachedSessionData) {\r\n        const sessionData = JSON.parse(cachedSessionData);\r\n        if (sessionData && sessionData.octagon_api_key) {\r\n          Logger.info('Found API key in CachedSessionSettings');\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      // Also check our direct storage\r\n      const directApiKey = sessionStorage.getItem(API_KEY_STORAGE_NAME);\r\n      if (directApiKey) {\r\n        Logger.info('Found API key in direct SessionStorage');\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      Logger.error('Error checking for stored API key', error);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Set the API key for authentication\r\n   */\r\n  public setApiKey(apiKey: string): void {\r\n    this.apiKey = apiKey;\r\n    this.saveApiKey(apiKey);\r\n  }\r\n  \r\n  /**\r\n   * Save API key to SessionStorage\r\n   */\r\n  private saveApiKey(apiKey: string): void {\r\n    try {\r\n      // Save to SessionStorage\r\n      sessionStorage.setItem(API_KEY_STORAGE_NAME, apiKey);\r\n      \r\n      // Also save to CachedSessionSettings for compatibility\r\n      try {\r\n        const cachedSessionData = sessionStorage.getItem(CACHED_SESSION_SETTINGS_KEY);\r\n        if (cachedSessionData) {\r\n          const sessionData = JSON.parse(cachedSessionData);\r\n          sessionData.octagon_api_key = apiKey;\r\n          sessionStorage.setItem(CACHED_SESSION_SETTINGS_KEY, JSON.stringify(sessionData));\r\n        } else {\r\n          // Create a new cached session settings object\r\n          const newSessionData = { octagon_api_key: apiKey };\r\n          sessionStorage.setItem(CACHED_SESSION_SETTINGS_KEY, JSON.stringify(newSessionData));\r\n        }\r\n      } catch (error) {\r\n        Logger.warn('Failed to save to CachedSessionSettings', error);\r\n      }\r\n      \r\n      Logger.info('API key saved to SessionStorage');\r\n    } catch (error) {\r\n      Logger.error('Failed to save API key to SessionStorage', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Call an Octagon agent with a prompt\r\n   * \r\n   * @param agentId - The ID of the agent to call\r\n   * @param prompt - The prompt to send to the agent\r\n   * @returns A promise that resolves to the agent's response\r\n   */\r\n  public async callAgent(agentId: string, prompt: string): Promise<ApiResponse<AgentFullResponse>> {\r\n    Logger.info(`callAgent invoked with agent: ${agentId}, prompt: ${prompt.substring(0, 50)}...`);\r\n    const requestData = {\r\n      model: agentId,\r\n      input: prompt,\r\n      stream: true\r\n    };\r\n    Logger.debug('callAgent request data:', requestData);\r\n    const response = await this.apiRequest<any>(`/responses`, 'POST', requestData, true);\r\n    if (!response.success) {\r\n      return response as ApiResponse<AgentFullResponse>;\r\n    }\r\n    return response as ApiResponse<AgentFullResponse>;\r\n  }\r\n  \r\n  /**\r\n   * Load API key from SessionStorage with a simplified approach\r\n   */\r\n  private loadApiKey(): void {\r\n    Logger.info('Attempting to load API key from SessionStorage');\r\n    \r\n    try {\r\n      // Try CachedSessionSettings first\r\n      const cachedSessionData = sessionStorage.getItem(CACHED_SESSION_SETTINGS_KEY);\r\n      if (cachedSessionData) {\r\n        try {\r\n          const sessionData = JSON.parse(cachedSessionData);\r\n          if (sessionData && sessionData.octagon_api_key) {\r\n            this.apiKey = sessionData.octagon_api_key;\r\n            Logger.info('API key loaded from CachedSessionSettings');\r\n            return;\r\n          }\r\n        } catch (parseError) {\r\n          Logger.warn('Failed to parse CachedSessionSettings', parseError);\r\n        }\r\n      }\r\n      \r\n      // Fallback to direct storage\r\n      const directApiKey = sessionStorage.getItem(API_KEY_STORAGE_NAME);\r\n      if (directApiKey) {\r\n        this.apiKey = directApiKey;\r\n        Logger.info('API key loaded from direct SessionStorage');\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      Logger.error('Failed to load API key from SessionStorage', error);\r\n    }\r\n    \r\n    // If we get here, no API key was found\r\n    Logger.info('No API key found in SessionStorage');\r\n  }\r\n  \r\n  /**\r\n   * Check if the API key is set\r\n   */\r\n  public isAuthenticated(): boolean {\r\n    // Force reload of the API key to ensure we have the latest\r\n    if (!this.apiKey) {\r\n      this.loadApiKey();\r\n    }\r\n    const hasApiKey = !!this.apiKey && this.apiKey.trim() !== '';\r\n    return hasApiKey;\r\n  }\r\n  \r\n  /**\r\n   * Clear stored API key from all SessionStorage locations\r\n   */\r\n  public clearApiKey(): void {\r\n    this.apiKey = null;\r\n    \r\n    try {\r\n      // Clear direct API key storage\r\n      sessionStorage.removeItem(API_KEY_STORAGE_NAME);\r\n      \r\n      // Clear from CachedSessionSettings if it exists\r\n      const cachedSessionData = sessionStorage.getItem(CACHED_SESSION_SETTINGS_KEY);\r\n      if (cachedSessionData) {\r\n        try {\r\n          const sessionData = JSON.parse(cachedSessionData);\r\n          if (sessionData) {\r\n            delete sessionData.octagon_api_key;\r\n            sessionStorage.setItem(CACHED_SESSION_SETTINGS_KEY, JSON.stringify(sessionData));\r\n          }\r\n        } catch (parseError) {\r\n          Logger.warn('Failed to parse CachedSessionSettings for clearing', parseError);\r\n        }\r\n      }\r\n      \r\n      Logger.info('API key cleared from all SessionStorage locations');\r\n    } catch (error) {\r\n      Logger.error('Failed to clear API key from SessionStorage', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Generic method to make authenticated API requests\r\n   * Handles both regular JSON responses and streamed responses\r\n   */\r\n  private async apiRequest<T>(\r\n    endpoint: string, \r\n    method: string = 'POST', \r\n    data?: any,\r\n    stream: boolean = true\r\n  ): Promise<ApiResponse<T>> {\r\n    \r\n    if (!this.isAuthenticated()) {\r\n      Logger.error('API request failed: Not authenticated');\r\n      return {\r\n        success: false,\r\n        error: 'Not authenticated. Please set your API key first.'\r\n      };\r\n    }\r\n    \r\n    const url = `${this.apiUrl}${endpoint}`;\r\n    \r\n    try {\r\n      Logger.info(`Making ${method} request to ${url}`, data);\r\n      \r\n      const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`\r\n      });\r\n      \r\n      Logger.debug('Request headers:', {\r\n        contentType: headers.get('Content-Type'),\r\n        authorization: this.apiKey ? `Bearer ${this.apiKey.substring(0, 5)}...` : 'None'\r\n      });\r\n      \r\n      const requestBody = data ? JSON.stringify(data) : undefined;\r\n      Logger.debug('Request body:', requestBody);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers,\r\n        body: requestBody\r\n      });\r\n      \r\n      Logger.info(`Response status: ${response.status} ${response.statusText}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        Logger.error(`API request failed: ${response.status} ${response.statusText}`, errorText);\r\n        \r\n        return {\r\n          success: false,\r\n          error: `Request failed (${response.status}): ${errorText || response.statusText}`\r\n        };\r\n      }\r\n      \r\n      const streamedResponse = await this.handleStreamedResponse(response);\r\n      return streamedResponse as ApiResponse<T>;\r\n    \r\n    } catch (error) {\r\n      Logger.error('API request failed with exception', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle streamed responses from the Octagon API\r\n   * @param response - The fetch response object with streamed data\r\n   * @returns Parsed response data\r\n   */\r\n  private async handleStreamedResponse(response: Response): Promise<ApiResponse<any>> {\r\n    try {\r\n      // Get the reader for the stream\r\n      const reader = response.body?.getReader();\r\n      if (!reader) {\r\n        Logger.error('Response stream could not be read');\r\n        return { \r\n          success: false, \r\n          error: 'Response stream could not be read' \r\n        };\r\n      }\r\n\r\n      Logger.info('Processing streamed response');\r\n      \r\n      // Variables to collect the response\r\n      let fullText = '';\r\n      let finalResponse = null;\r\n      let parseErrorCount = 0; // Track number of parse errors\r\n      \r\n      // Process the stream\r\n      while (true) {\r\n        try {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n          \r\n          // Convert the chunks to text\r\n          const chunk = new TextDecoder().decode(value);\r\n          Logger.debug('Received stream chunk:', chunk.substring(0, 100) + (chunk.length > 100 ? '...' : ''));\r\n          \r\n          // Process each line that starts with \"data: \"\r\n          const lines = chunk.split('\\n');\r\n          for (const line of lines) {\r\n            if (line.startsWith('data: ')) {\r\n              const jsonStr = line.substring(6); // Remove 'data: ' prefix\r\n              \r\n              // Check for the end of stream marker\r\n              if (jsonStr.trim() === '[DONE]') {\r\n                Logger.info('Stream completed [DONE] marker received');\r\n                continue;\r\n              }\r\n              \r\n              try {\r\n                const data = JSON.parse(jsonStr);\r\n                Logger.debug('Parsed stream data type:', data.type);\r\n                \r\n                // Process based on the type of data\r\n                if (data.type === 'response.completed') {\r\n                  // This is the final response with all data\r\n                  finalResponse = data.response;\r\n                  Logger.info('Final response received');\r\n                } else if (data.type === 'response.output_text.delta' || data.type === 'response.output_text.done') {\r\n                  // This is a text delta/update, append to our content\r\n                  if (data.delta) {\r\n                    fullText += data.delta;\r\n                  } else if (data.text) {\r\n                    fullText = data.text; // This is the complete text\r\n                  }\r\n                } else if (data.type === 'response.content_part.done' && data.part?.text) {\r\n                  // Content part with complete text\r\n                  fullText = data.part.text;\r\n                } else if (data.response && data.response.output) {\r\n                  // Store the full response data for direct access\r\n                  finalResponse = data.response;\r\n                }\r\n              } catch (parseError) {\r\n                parseErrorCount++;\r\n                Logger.warn(`Error parsing stream JSON (${parseErrorCount}): ${parseError} - ${jsonStr.substring(0, 100)}`);\r\n                \r\n                // If we hit too many parse errors, we might be dealing with a bad stream\r\n                if (parseErrorCount > 5) {\r\n                  Logger.error('Too many JSON parse errors in stream, aborting');\r\n                  throw new Error('Stream parsing failed: Too many JSON parse errors');\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } catch (streamError) {\r\n          Logger.error('Error processing stream chunk:', streamError);\r\n          throw streamError; // Rethrow to be caught by the outer try/catch\r\n        }\r\n      }\r\n      \r\n      // Ensure we have some content to return, even if it's empty\r\n      const transformedResponse = {\r\n        content: fullText || '',\r\n        id: finalResponse?.id || '',\r\n        model: finalResponse?.model || '',\r\n        created: finalResponse?.created_at || Date.now(),\r\n        // For compatibility with functions.ts, include the raw response\r\n        output: finalResponse?.output || [],\r\n        // Include full response data for more advanced processing if needed\r\n        rawResponse: finalResponse\r\n      };\r\n      \r\n      Logger.info('Streamed response processed successfully');\r\n      Logger.debug('Transformed response:', {\r\n        contentLength: transformedResponse.content.length,\r\n        hasId: !!transformedResponse.id,\r\n        hasModel: !!transformedResponse.model,\r\n        outputItems: transformedResponse.output.length\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        data: transformedResponse\r\n      };\r\n    } catch (error) {\r\n      Logger.error('Error processing streamed response:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to process streamed response'\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Test API key validity with a simple request\r\n   */\r\n  public async testConnection(): Promise<ApiResponse<StreamResponse>> {\r\n    Logger.info('Testing API connection with stored key');\r\n    \r\n    // If no API key was loaded, return failure immediately\r\n    if (!this.isAuthenticated()) {\r\n      Logger.error('Test connection failed: No API key available');\r\n      return {\r\n        success: false,\r\n        error: 'No API key available for testing'\r\n      };\r\n    }\r\n    \r\n    // Use a simple, fast query to test the connection\r\n    try {\r\n      const model = 'octagon-agent'; // Default model for testing\r\n      const result = await this.apiRequest<any>('/responses', 'POST', {\r\n        model: model,\r\n        input: 'Test connection',\r\n        max_tokens: 10\r\n      }, true); // Add true for stream parameter\r\n      \r\n      Logger.info(`Test connection result: ${result.success ? 'Success' : 'Failed'}`);\r\n      \r\n      if (result.success) {\r\n        // Try to log the response format to help debugging\r\n        Logger.debug('Test connection response format:', {\r\n          hasContent: result.data && typeof result.data.content !== 'undefined',\r\n          hasChoices: result.data && Array.isArray(result.data.choices),\r\n          responseKeys: result.data ? Object.keys(result.data) : []\r\n        });\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      Logger.error('Test connection threw an exception', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error during connection test'\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Main method for agent interaction - OpenAI compatible\r\n   * Maps agent selection to model names and formats query as message array\r\n   */\r\n  public async ResponseEndpoint(\r\n    query: string,\r\n    model: string,\r\n    stream: boolean = true\r\n  ): Promise<ApiResponse<StreamResponse>> {\r\n    Logger.info('Making stream responses endpoint request', { query: query.substring(0, 100) + '...', model, stream });\r\n    \r\n    // Use the improved streaming response handling when stream is true\r\n    return this.apiRequest<StreamResponse>('/responses', 'POST', {\r\n      model: model,\r\n      input: query,\r\n      stream: stream\r\n    }, stream);\r\n  }\r\n    \r\n}\r\n\r\n// Export singleton instance\r\nexport const octagonApiService = new OctagonApiService();","/* global console, CustomFunctions, Office */\r\n\r\n/**\r\n * Octagon Excel Add-in Custom Functions\r\n * This file defines custom functions that expose Octagon's AI agents as Excel formulas\r\n */\r\n\r\nimport { octagonApiService } from '../api/octagonApi';\r\nimport Logger from '../utils/logger';\r\n\r\n// Initialize the Octagon API client\r\nconst octagonApi = octagonApiService;\r\n\r\n// Flag to track if we've initialized the API\r\nlet isApiInitialized = false;\r\n\r\n/**\r\n * Initializes the Octagon API and registers custom functions\r\n * This is automatically called when the add-in is initialized with SharedRuntime\r\n */\r\nOffice.onReady(() => {\r\n  try {\r\n    Logger.info(\"Office is ready - initializing Octagon functions\");\r\n    // Initialize the API service\r\n    octagonApi.initialize();\r\n    isApiInitialized = true;\r\n    Logger.info(`API initialization complete. Authentication status: ${octagonApi.isAuthenticated() ? 'Authenticated' : 'Not authenticated'}`);\r\n    \r\n    // Register functions with the Excel namespace (OCTAGON)\r\n    registerCustomFunctions();\r\n  } catch (error) {\r\n    Logger.error(\"Error during initialization:\", error);\r\n  }\r\n});\r\n\r\n/**\r\n * Register all custom functions with Excel\r\n * This is called after Office is ready and the API is initialized\r\n */\r\nfunction registerCustomFunctions() {\r\n  try {    \r\n    // Register all Octagon agents with the OCTAGON namespace\r\n    CustomFunctions.associate(\"OCTAGON.OCTAGON_AGENT\", OCTAGON_AGENT);\r\n    CustomFunctions.associate(\"OCTAGON.DEEP_RESEARCH_AGENT\", DEEP_RESEARCH_AGENT);\r\n    CustomFunctions.associate(\"OCTAGON.SCRAPER_AGENT\", SCRAPER_AGENT);\r\n    \r\n    Logger.info(\"Custom functions registered successfully\");\r\n  } catch (error) {\r\n    Logger.error(\"Error registering custom functions:\", error);\r\n  }\r\n}\r\n\r\n/**\r\n * Map short agent IDs to their full model names\r\n */\r\nconst AGENT_ID_MAP: Record<string, string> = {\r\n  'research': 'octagon-deep-research-agent',\r\n  'scraper': 'octagon-scraper-agent',\r\n  'octagon': 'octagon-agent'\r\n};\r\n\r\n/**\r\n * Base implementation for Octagon agent functions\r\n * @param agentId - The ID of the Octagon agent to use\r\n * @param prompt - The prompt to send to the agent\r\n * @param invocation - Optional streaming invocation object for cancellation support\r\n * @returns The agent's response\r\n */\r\nasync function callOctagonAgent(\r\n  agentId: string, \r\n  prompt: string, \r\n  invocation?: CustomFunctions.StreamingInvocation<string>\r\n): Promise<string> {\r\n  try {\r\n    // Validate the prompt\r\n    if (!prompt || prompt.trim() === \"\") {\r\n      return \"Error: Please provide a valid prompt\";\r\n    }\r\n\r\n    // Check if API is initialized\r\n    if (!isApiInitialized) {\r\n      return \"Error: API not initialized. Please try again in a few moments.\";\r\n    }\r\n\r\n    // Check if authenticated\r\n    if (!octagonApi.isAuthenticated()) {\r\n      return \"Error: Not authenticated. Please enter your API key in the Login Screen.\";\r\n    }\r\n\r\n    // Map agent ID to full model name\r\n    const modelName = AGENT_ID_MAP[agentId.toLowerCase()] || agentId;\r\n\r\n    // Call the agent\r\n    const response = await octagonApi.callAgent(modelName, prompt);\r\n    \r\n    // Extract the text content from the response object\r\n    return response.data.content || \"No response content\";\r\n    \r\n  } catch (error) {\r\n    Logger.error(`Error calling Octagon agent (${agentId}):`, error);\r\n    if (error instanceof Error) {\r\n      return `Error: ${error.message}`;\r\n    }\r\n    \r\n    // Register all Octagon agents with the OCTAGON namespace\r\n    CustomFunctions.associate(\"OCTAGON_AGENT\", OCTAGON_AGENT);\r\n    CustomFunctions.associate(\"DEEP_RESEARCH_AGENT\", DEEP_RESEARCH_AGENT);\r\n    CustomFunctions.associate(\"SCRAPER_AGENT\", SCRAPER_AGENT);\r\n    \r\n    return \"Error: An unexpected error occurred\";\r\n  }\r\n}\r\n\r\n// ===============================================================\r\n// Market Intelligence Agent\r\n// ===============================================================\r\n\r\n/**\r\n * Call the Market Intelligence agent that routes to appropriate specialized agents\r\n * @customfunction OCTAGON_AGENT\r\n * @param prompt The question or prompt for the Octagon agent\r\n * @helpUrl https://docs.octagonagents.com/guide/agents/octagon-agent.html\r\n * @returns A string containing the agent's response\r\n */\r\nexport function OCTAGON_AGENT(prompt: string): Promise<string> {\r\n  return callOctagonAgent('octagon', prompt);\r\n}\r\n\r\n// ===============================================================\r\n// Deep Research Agent\r\n// ===============================================================\r\n\r\n/**\r\n * Call the Research agent for deep, comprehensive research\r\n * @customfunction DEEP_RESEARCH_AGENT\r\n * @param prompt The question or prompt for the Research agent\r\n * @helpUrl https://docs.octagonagents.com/guide/agents/deep-research-agent.html\r\n * @returns Comprehensive research based on the prompt\r\n */\r\nexport function DEEP_RESEARCH_AGENT(prompt: string): Promise<string> {\r\n  return callOctagonAgent('research', prompt);\r\n}\r\n\r\n// ===============================================================\r\n// Scraper Agent\r\n// ===============================================================\r\n\r\n/**\r\n * Call the Scraper agent for web data extraction\r\n * @customfunction SCRAPER_AGENT\r\n * @param prompt The question or prompt for the Scraper agent\r\n * @helpUrl https://docs.octagonagents.com/guide/agents/scraper-agent.html\r\n * @returns Web data extraction based on the prompt\r\n */\r\nexport function SCRAPER_AGENT(prompt: string): Promise<string> {\r\n  return callOctagonAgent('scraper', prompt);\r\n}\nCustomFunctions.associate(\"OCTAGON_AGENT\", OCTAGON_AGENT);\nCustomFunctions.associate(\"DEEP_RESEARCH_AGENT\", DEEP_RESEARCH_AGENT);\nCustomFunctions.associate(\"SCRAPER_AGENT\", SCRAPER_AGENT);"],"names":["LogLevel","currentLogLevel","ERROR","logLevelPriority","_defineProperty","DEBUG","INFO","WARN","log","level","message","data","timestamp","Date","toISOString","formattedMessage","concat","console","debug","info","warn","error","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","_typeof","toPrimitive","String","_toPrimitive","API_KEY_STORAGE_NAME","CACHED_SESSION_SETTINGS_KEY","OctagonApiService","apiUrl","undefined","_classCallCheck","this","Logger","isOfficeInitialized","loadApiKey","isAuthenticated","cachedSessionData","sessionStorage","getItem","sessionData","JSON","parse","octagon_api_key","apiKey","saveApiKey","setItem","stringify","newSessionData","_callAgent","_callee","agentId","prompt","requestData","response","_context","substring","model","input","stream","apiRequest","success","_x","_x2","parseError","directApiKey","trim","removeItem","_apiRequest","_callee2","endpoint","method","url","headers","requestBody","errorText","streamedResponse","_t","_args2","_context2","Headers","contentType","get","authorization","fetch","body","status","statusText","ok","text","handleStreamedResponse","Error","_x3","_handleStreamedResponse","_callee3","_response$body","_finalResponse","_finalResponse2","_finalResponse3","_finalResponse4","reader","fullText","finalResponse","parseErrorCount","_yield$reader$read","chunk","lines","_iterator","_step","line","jsonStr","_data$part","transformedResponse","_t2","_t3","_t4","_t5","_context3","getReader","read","TextDecoder","decode","split","_createForOfIteratorHelper","s","startsWith","type","delta","part","output","content","id","created","created_at","now","rawResponse","contentLength","hasId","hasModel","outputItems","_x4","_testConnection","_callee4","result","_t6","_context4","max_tokens","hasContent","hasChoices","Array","isArray","choices","responseKeys","keys","_ResponseEndpoint","_callee5","query","_args5","_context5","_x5","_x6","octagonApi","isApiInitialized","Office","onReady","initialize","CustomFunctions","associate","OCTAGON_AGENT","DEEP_RESEARCH_AGENT","SCRAPER_AGENT","registerCustomFunctions","AGENT_ID_MAP","callOctagonAgent","_callOctagonAgent","invocation","modelName","toLowerCase","callAgent"],"sourceRoot":""}